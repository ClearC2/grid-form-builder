import _defineProperty from "@babel/runtime-corejs3/helpers/esm/defineProperty";
function ownKeys(e, r) { var t = _Object$keys(e); if (_Object$getOwnPropertySymbols) { var o = _Object$getOwnPropertySymbols(e); r && (o = _filterInstanceProperty(o).call(o, function (r) { return _Object$getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var _context, _context2; var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? _forEachInstanceProperty(_context = ownKeys(Object(t), !0)).call(_context, function (r) { _defineProperty(e, r, t[r]); }) : _Object$getOwnPropertyDescriptors ? _Object$defineProperties(e, _Object$getOwnPropertyDescriptors(t)) : _forEachInstanceProperty(_context2 = ownKeys(Object(t))).call(_context2, function (r) { _Object$defineProperty(e, r, _Object$getOwnPropertyDescriptor(t, r)); }); } return e; }
import _setTimeout from "@babel/runtime-corejs3/core-js-stable/set-timeout";
import _replaceAllInstanceProperty from "@babel/runtime-corejs3/core-js/instance/replace-all";
import _indexOfInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/index-of";
import _Object$keys from "@babel/runtime-corejs3/core-js-stable/object/keys";
import _Object$getOwnPropertySymbols from "@babel/runtime-corejs3/core-js-stable/object/get-own-property-symbols";
import _filterInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/filter";
import _Object$getOwnPropertyDescriptor from "@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptor";
import _forEachInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/for-each";
import _Object$getOwnPropertyDescriptors from "@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptors";
import _Object$defineProperties from "@babel/runtime-corejs3/core-js-stable/object/define-properties";
import _Object$defineProperty from "@babel/runtime-corejs3/core-js-stable/object/define-property";
import React, { Component } from 'react';
import PropTypes from 'prop-types';
import Quill from 'quill';
import 'quill/dist/quill.snow.css';
export class ReactQuill extends Component {
  constructor() {
    var _this;
    super(...arguments);
    _this = this;
    _defineProperty(this, "editor", null);
    _defineProperty(this, "getEditor", () => this.editor);
    _defineProperty(this, "createEditor", () => {
      const {
        theme = 'snow',
        modules = {},
        name
      } = this.props;
      this.editor = new Quill(`#${name}`, {
        theme,
        modules
      });
      this.attachEventListeners();
      this.setReadOnly();
      this.setCurrentValueInEditor();
    });
    _defineProperty(this, "attachEventListeners", () => {
      if (!this.editor) return;
      this.editor.on('editor-change', this.onEditorChange);
    });
    _defineProperty(this, "setReadOnly", () => {
      this.editor.enable(!this.props.readOnly);
    });
    _defineProperty(this, "onEditorChange", function (event) {
      if (event === 'text-change') {
        for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
          args[_key - 1] = arguments[_key];
        }
        _this.onTextChange(...args);
      }
    });
    _defineProperty(this, "debounce", null);
    _defineProperty(this, "onTextChange", (delta, oldDelta, source) => {
      if (source !== 'api') {
        clearTimeout(this.debounce);
        this.debounce = _setTimeout(() => {
          const html = this.editor?.root?.innerHTML || this.editor?.getSemanticHTML() || '';
          this.props.onChange(html);
        }, 1250);
      }
    });
    _defineProperty(this, "setCurrentValueInEditor", () => {
      const {
        isFocused
      } = this.props;
      let {
        value
      } = this.props;
      if (!this.editor || typeof value === 'undefined') return;
      let cursor = {
        index: 0,
        length: 0
      };
      if (isFocused) {
        cursor = this.editor.getSelection() ? this.editor.getSelection() : {
          index: 0,
          length: 0
        };
      }
      if (typeof value === 'string') {
        value = _replaceAllInstanceProperty(value).call(value, ' <', '&nbsp;<');
        value = _replaceAllInstanceProperty(value).call(value, '  ', '&nbsp;&nbsp;'); // this fixes an issue where multiple spaces/trailing spaces in the markup are truncated - JRA 01/16/25
        if (_indexOfInstanceProperty(value).call(value, '<html') > -1) {
          // this markup was generated by something else, Quill does not include the html tag - JRA 01/31/25
          value = _replaceAllInstanceProperty(value).call(value, '<html', '<div'); // replace this reference so the user can use normal tables - JRA 01/31/25
          value = _replaceAllInstanceProperty(value).call(value, '</html', '</div'); // replace this reference so the user can use normal tables - JRA 01/31/25
          value = _replaceAllInstanceProperty(value).call(value, '<table', '<div');
          value = _replaceAllInstanceProperty(value).call(value, '</table', '</div');
          value = _replaceAllInstanceProperty(value).call(value, '<tbody', '<div style="display: flex; flex-direction: column;"');
          value = _replaceAllInstanceProperty(value).call(value, '</tbody', '</div');
          value = _replaceAllInstanceProperty(value).call(value, '<tr', '<div style="display: flex; flex-direction: row;"');
          value = _replaceAllInstanceProperty(value).call(value, '</tr', '</div');
          value = _replaceAllInstanceProperty(value).call(value, '<td', '<div style="display: flex; flex-direction: column;"');
          value = _replaceAllInstanceProperty(value).call(value, '</td', '</div');
        }
      }
      this.editor.clipboard.dangerouslyPasteHTML(value);
      if (isFocused) {
        this.editor.setSelection(cursor.index, cursor.length);
      } else {
        this.editor.blur();
      }
    });
  }
  componentDidUpdate(p) {
    if (this.props.value !== p.value) {
      this.setCurrentValueInEditor();
    }
    if (this.props.readOnly !== p.readOnly) {
      this.setReadOnly();
    }
  }
  componentDidMount() {
    this.setCurrentValueInEditor();
    this.createEditor();
  }
  render() {
    const {
      name,
      onFocus,
      onBlur,
      css = {},
      tabIndex,
      className
    } = this.props;
    return /*#__PURE__*/React.createElement("div", {
      id: name,
      className: className,
      style: _objectSpread({
        width: '100%'
      }, css),
      onFocus: onFocus,
      onBlur: onBlur,
      tabIndex: tabIndex
    });
  }
}
_defineProperty(ReactQuill, "propTypes", {
  name: PropTypes.string,
  theme: PropTypes.string,
  modules: PropTypes.object,
  formats: PropTypes.array,
  onChange: PropTypes.func,
  value: PropTypes.string,
  readOnly: PropTypes.bool,
  isFocused: PropTypes.bool,
  onFocus: PropTypes.func,
  onBlur: PropTypes.func,
  css: PropTypes.object,
  tabIndex: PropTypes.number,
  className: PropTypes.string
});
export default ReactQuill;